Goal:

- outperform redis on a benchmark on multi-core for subset of ops


TODO:

DONE - add set/get/delete key val

- represent as Ops
    - Op can serialise to string. Yay.

DONE - add constant 'NullBulkString' to resp.go
    - return for non-existent GET

DONE - add a test for number of keys deleted by Del over protocol
    DONE - we don't return an error if the key doesn't exist from store.Del
    DONE - so we return an incorrect count of keys deleted

DONE - get redis-benchmark numbers (need to define subtests)

WIP - find resp grammar
    WIP - parse RESP
    - compose RESP

- implement structured responses

- structure implemented commands
    - needed for 'COMMAND' response
    - make the text -> code representable in data for ParseCommand
        
- add sharded
    - need to make a ctor?

- make ops consume resp and return resp?

- single map in server

- add tests (under race detector) to trigger
    - can just inject Ops into a server instance
    - although going over protocol allows test against redis

- add performance measure (ops/sec under a defined load)
    - or is there a redis-bench

- start performance table
    - compare redis with loris?

- add mutex
    - take performance measure

- add 2x or 10x sub-maps, with hash of key -> submap
    - mutex on submap
    - take performance measure

- try actor-model submap
    - take performance measure
